name: My EKS Workflow

on: push:
  branches:
    - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI (Optional, if not pre-installed on runner)
        # ... (consider adding this step if needed)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2  # Corrected action name
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get cluster credentials
        id: get-credentials
        run: |
          cluster_name=harisheks
          aws eks describe-cluster --name $harisheks | jq -r '.arn:aws:eks:ap-south-1:897708050608:cluster/harisheks' cluster-identity-arn.txt

      - name: Assume role and store credentials
        run: |
          aws sts assume-role \
            --role-arn $(cat cluster-identity-arn.txt) \
            --role-session-name github-actions-eks-access \
            --output text | jq -r '.Credentials.AccessKeyId,.Credentials.SecretAccessKey,.Credentials.SessionToken' > eks-credentials.txt

      - name: Deploy Nginx to EKS
        run: |
          export AWS_ACCESS_KEY_ID=$(cat eks-credentials.txt | head -n 1)
          export AWS_SECRET_ACCESS_KEY=$(cat eks-credentials.txt | head -n 2 | tail -n 1)
          export AWS_SESSION_TOKEN=$(cat eks-credentials.txt | tail -n 1)

          # Assuming you have kubectl configured with a cluster context
          kubectl apply -f nginx-deployment.yaml
